// =====================================================
// ------------ Megatype media query mixins ------------
// =====================================================
// @author Thomas Bredin-Grey <tom@studiothick.com>
// Megatype: https://github.com/StudioThick/megatype
// =====================================================



// Media queries. Accepts px or em
// Defaults to min-width, but both min->max and max-width are available too.
// Parts based on https://gist.github.com/timknight/03e6335b8816aa534cf7
@mixin media($min: -1, $max: -1) {
    // Type of break variable
    $min-val: type-of($min);
    $min-unit: '';
    @if $min-val == number {
        $min-unit: unit($min);
    }

    $max-val: '';
    $max-unit: '';

    // Make sure breakpoints aren't the same
    @if $min != $max {
        @if $max != -1 {
            $max-val: type-of($max);
            @if $max-val == number {
                $max-unit: unit($max);
            }
        }

        @if $min-unit == "px" {
            $min: no-unit($min) / 16 * 1em;
        }

        @if $max-unit == "px" {
            $max: no-unit($max) / 16 * 1em;
        }

        $query: "all" !default;

            // first, lets kick any breakpoint variables back to the breakpoint-layout mixin, which can handle these
            @if $min-val == string or $max-val == string {
                @include breakpoint-layout($min, $max) {
                    @content;
                };
            } @else {
                @if $min-unit == "px" or $min-unit == "em" {
                    // If using other numbers output value in ems either for min, min & max or max width breakpoints.
                    @if $max-unit == "px" or $max-unit == "em" {
                        $query: "(min-width: #{$min}) and (max-width: #{$max})";
                    } @else {
                        $query: "(min-width: #{$min})";
                    }
                } @else if $max-unit == "px" or $max-unit == "em" {
                    $query: "(max-width: #{$max})";
                } @else {
                    @error "#{$min} and #{$max} are not valid for use in media query mixin - must use px or ems";
                }

                @if $query != "all" {
                    @media #{$query} { @content; }
                } @else {
                    @error "#{$min} and #{$max} did not resolve to a valid media query, styles not output";
                }
            }
    } @else {
        @warn "Provided #{$min} and #{$max} breakpoints are the same and will not produce any styles, so this query has not been output";
    }
}


// Wrapper for media queries using breakpoint keys. Also exposes current breakpoint to content via $current-breakpoint/root variables
// WARNING: recommended for internal use only â€” this mixin will be removed / combined with "media" mixin in an upcoming version
@mixin breakpoint-layout($min: -1, $max: -1) {
    //@if map-has-key($breakpoint-map, $min) {
        // make current breakpoint context available in global scope
        @if $min == -1 {
            $current-breakpoint: $max !global;
            $current-rootsize: break-get($max, rootsize) !global;
        }@else if $max == -1{
            $current-breakpoint: $min !global;
            $current-rootsize: break-get($min, rootsize) !global;
        }

        @if $current-breakpoint == xl and $max == xl {
            @content;
        } @else {
            $minw: none;
            $maxw: none;
            @if $min != -1 {
                $minw: break-get($min, start);
            }

            @if $max != -1 and map-has-key($breakpoint-map, $max) {
                $maxw: break-get($max, max);
            }

            @if $min != -1 and $max != -1 {
                @include media($minw, $maxw) {
                    @content;
                }
            } @else if $min != -1 {
                @include media($minw) {
                    @content;
                }
            } @else if $max != -1 {
                @include media(-1, $maxw) {
                    @content;
                }
            }
        }

        // reset current breakpoint context
        $current-breakpoint: xl !global;
        $current-rootsize: break-get(xl, rootsize) !global;
    //} @else {
    //    @warn "#{$min} is not a valid breakpoint number";
    //}
}



// apply min-width media query to one or more breakpoints
@mixin min-width($apply-breaks: 0) {
    @each $break in $apply-breaks {
        @include media($break) {
            @content;
        };
    }
}

// apply max-width media query to one or more breakpoints
@mixin max-width($apply-breaks: 0) {
    @each $break in $apply-breaks {
        @include media(-1, $break) {
            @content;
        };
    }
}

// apply a style at all breakpoints, taking into account any change in baseline at different breakpoints
@mixin all-breakpoints {
    @each $break in $breaks {
        @include breakpoint-layout($break) {
            @content;
        }
    }
}
